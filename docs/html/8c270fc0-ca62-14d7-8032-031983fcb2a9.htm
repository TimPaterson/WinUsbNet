<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>WinUsbManager Class</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="WinUsbManager class" /><meta name="System.Keywords" content="WinUsbNet.WinUsbManager class" /><meta name="Microsoft.Help.F1" content="WinUsbNet.WinUsbManager" /><meta name="Microsoft.Help.Id" content="T:WinUsbNet.WinUsbManager" /><meta name="Description" content="The root class for the managed interface to WinUSB.sys." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="WinUsbNet" /><meta name="file" content="8c270fc0-ca62-14d7-8032-031983fcb2a9" /><meta name="guid" content="8c270fc0-ca62-14d7-8032-031983fcb2a9" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.3.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">WinUsbNet: .NET class library for WinUSB.sys<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html\e8f8006d-1c14-4a09-a066-99700d658e09.htm" title="WinUsbNet: .NET class library for WinUSB.sys" tocid="roottoc">WinUsbNet: .NET class library for WinUSB.sys</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/015f32d9-061b-6669-eca8-b8abe1d244d9.htm" title="WinUsbNet" tocid="015f32d9-061b-6669-eca8-b8abe1d244d9">WinUsbNet</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/8c270fc0-ca62-14d7-8032-031983fcb2a9.htm" title="WinUsbManager Class" tocid="8c270fc0-ca62-14d7-8032-031983fcb2a9">WinUsbManager Class</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/c9822f4d-107e-87c5-132c-1ff35c9c2014.htm" title="WinUsbManager Constructor " tocid="c9822f4d-107e-87c5-132c-1ff35c9c2014">WinUsbManager Constructor </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/a0d1f1f6-7408-d9d7-f1f6-05a386e78d03.htm" title="WinUsbManager Properties" tocid="a0d1f1f6-7408-d9d7-f1f6-05a386e78d03">WinUsbManager Properties</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/39d8fc24-236a-571a-d10f-ea9abcbe0222.htm" title="WinUsbManager Methods" tocid="39d8fc24-236a-571a-d10f-ea9abcbe0222">WinUsbManager Methods</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/9e0a7df6-e0a8-7ca4-48e3-2569369c1fc5.htm" title="WinUsbManager Events" tocid="9e0a7df6-e0a8-7ca4-48e3-2569369c1fc5">WinUsbManager Events</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img src="../icons/Help.png" /></td><td class="titleColumn"><h1>WinUsbManager Class</h1></td></tr></table><span class="introStyle"></span> <div class="summary">
            The root class for the managed interface to WinUSB.sys.
            </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Inheritance Hierarchy</span></div><div id="ID0RBSection" class="collapsibleSection"><span class="nolink">System<span id="LSTD0FDFD76_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTD0FDFD76_0?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Object</span><br />  <span class="selflink">WinUsbNet<span id="LSTD0FDFD76_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTD0FDFD76_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>WinUsbManager</span><br /></div><p> </p>
    <strong>Namespace:</strong> 
   <a href="015f32d9-061b-6669-eca8-b8abe1d244d9.htm">WinUsbNet</a><br />
    <strong>Assembly:</strong>
   WinUsbNet (in WinUsbNet.dll) Version: 1.0.0.0 (1.0.0.0)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1ECCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1ECCA','cs','1','3');return false;">C#</a></div><div id="ID1ECCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1ECCA','vb','2','3');return false;">VB</a></div><div id="ID1ECCA_tab3" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1ECCA','cpp','3','3');return false;">C++</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1ECCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1ECCA');return false;" title="Copy">Copy</a></div></div><div id="ID1ECCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">WinUsbManager</span> : <span class="identifier">IDisposable</span></pre></div><div id="ID1ECCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">WinUsbManager</span>
	<span class="keyword">Implements</span> <span class="identifier">IDisposable</span></pre></div><div id="ID1ECCA_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">WinUsbManager</span> : <span class="identifier">IDisposable</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1ECCA");</script></div><p>The <span class="selflink">WinUsbManager</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Constructors</span></div><div id="ID3RBSection" class="collapsibleSection"><table class="members" id="constructorList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="c9822f4d-107e-87c5-132c-1ff35c9c2014.htm">WinUsbManager</a></td><td><div class="summary">
            Initializes a new instance of the <span class="selflink">WinUsbManager</span> class.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Properties</span></div><div id="ID4RBSection" class="collapsibleSection"><table class="members" id="propertyList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="f3ede2a7-3d4a-e35d-c63a-64d1d3c62eab.htm">UsbDevices</a></td><td><div class="summary">
            Gets the collection of matching USB devices that are currently attached.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="ID5RBSection" class="collapsibleSection"><table class="members" id="methodList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="35f3b214-ac8f-38df-fce0-a70ab9aeaf34.htm">Dispose<span id="LSTD0FDFD76_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTD0FDFD76_2?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a></td><td><div class="summary">
            Releases all resources used by the <span class="selflink">WinUsbManager</span> object.
            </div></td></tr><tr data="protected;declared;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="94cb0cf7-4cc3-bdae-d176-c1aca1ae1376.htm">Dispose(Boolean)</a></td><td><div class="summary">
            Releases the unmanaged resources used by the <span class="selflink">WinUsbManager</span>,
            and optionally releases the managed resources.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">Equals</span></td><td><div class="summary">Determines whether the specified <span class="nolink">Object</span> is equal to the current <span class="nolink">Object</span>.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="protected;declared;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="5ebf84a8-84e5-9499-4e08-76fb6ca3b82a.htm">Finalize</a></td><td><div class="summary">
            Allows a <span class="selflink">WinUsbManager</span> object to free resources 
            before it is reclaimed by garbage collection.
            </div> (Overrides <span class="nolink">Object<span id="LSTD0FDFD76_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTD0FDFD76_3?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Finalize<span id="LSTD0FDFD76_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTD0FDFD76_4?cs=()|vb=|cpp=()|nu=()|fs=()");</script></span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">GetHashCode</span></td><td><div class="summary">Serves as a hash function for a particular type. </div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">GetType</span></td><td><div class="summary">Gets the <span class="nolink">Type</span> of the current instance.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="protected;inherited;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><span class="nolink">MemberwiseClone</span></td><td><div class="summary">Creates a shallow copy of the current <span class="nolink">Object</span>.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">ToString</span></td><td><div class="summary">Returns a string that represents the current object.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Events</span></div><div id="ID6RBSection" class="collapsibleSection"><table class="members" id="eventList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubevent.gif" alt="Public event" title="Public event" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="43d0997e-3f63-bdf4-d82e-7837dfe8c9f1.htm">DeviceChange</a></td><td><div class="summary">
            Occurs when a matching USB device is attached or detached.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID7RB')" onkeypress="SectionExpandCollapse_CheckKey('ID7RB', event)" tabindex="0"><img id="ID7RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="ID7RBSection" class="collapsibleSection"><p>
            The first step in communicating with a USB device is to use the
            <a href="c9822f4d-107e-87c5-132c-1ff35c9c2014.htm">WinUsbManager</a> constructor
            to create an instance of <b>WinUsbManager</b>. The <a href="f3ede2a7-3d4a-e35d-c63a-64d1d3c62eab.htm">UsbDevices</a>
            collection will be populated with any USB devices with a matching 
            GUID that are already attached. You can subscribe to the
            <a href="43d0997e-3f63-bdf4-d82e-7837dfe8c9f1.htm">DeviceChange</a> event to be informed when this collection
            changes.</p><p>
            The next step is to select a <a href="5c95851e-394c-5556-4008-f65a2b8bf88f.htm">UsbDevice</a> from the 
            <a href="f3ede2a7-3d4a-e35d-c63a-64d1d3c62eab.htm">UsbDevices</a> collection and call its 
            <a href="72bfdb00-fb76-63ad-2011-3ef78f66e9ca.htm">Open</a> method. A very simple
            application could simply use <a href="f3ede2a7-3d4a-e35d-c63a-64d1d3c62eab.htm">UsbDevices</a>[0], but
            this may fail when multiple instances of the application are 
            running due to the exclusive lock on open USB devices. A better
            approach would be to enumerate the <a href="f3ede2a7-3d4a-e35d-c63a-64d1d3c62eab.htm">UsbDevices</a> collection
            to determine which <a href="5c95851e-394c-5556-4008-f65a2b8bf88f.htm">UsbDevice</a> object(s) can be
            successfully opened.</p><p>
            I/O with the USB device is performed using a <a href="cf6e7c0e-4099-2906-21b9-5d2043e72c19.htm">PipeStream</a>
            from the <a href="9908be68-4d50-ea5d-14c4-28360f84d27c.htm">PipeStreams</a> collection of the <a href="5c95851e-394c-5556-4008-f65a2b8bf88f.htm">UsbDevice</a>.
            A <a href="cf6e7c0e-4099-2906-21b9-5d2043e72c19.htm">PipeStream</a> represents a communications pipe with a
            specific USB endpoint.</p><p>
            After I/O with the USB device is completed, call the 
            <a href="b6b228d9-3e21-be6f-25dc-3c3b3657b820.htm">Close</a> method on the <a href="5c95851e-394c-5556-4008-f65a2b8bf88f.htm">UsbDevice</a>.
            Finally, call the <a href="35f3b214-ac8f-38df-fce0-a70ab9aeaf34.htm">Dispose</a> method
            when done using <b>WinUsbManager</b>.
            </p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID8RB')" onkeypress="SectionExpandCollapse_CheckKey('ID8RB', event)" tabindex="0"><img id="ID8RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID8RBSection" class="collapsibleSection">
            This example assumes a <span class="nolink">Form</span> named <b>Form1</b> with a 
            <span class="nolink">TextBox</span> named <b>txtGuid</b> and a <span class="nolink">ListBox</span>
            named <b>lstDevices</b>. It creates a <span class="selflink">WinUsbManager</span> 
            using the GUID in the text box, and then maintains a list of
            currently attached matching USB devices in the list box. The devices
            are identified by their manufacturer, product name, and serial
            number as present in the USB device. Double-clicking on a USB device
            in the list box will trigger some I/O transfers.
            <div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAAABA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.Text;
<span class="highlight-keyword">using</span> System.Windows.Forms;
<span class="highlight-keyword">using</span> System.IO;
<span class="highlight-keyword">using</span> System.Diagnostics;
<span class="highlight-keyword">using</span> WinUsbNet;

<span class="highlight-keyword">namespace</span> WinUsbExample
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">partial</span> <span class="highlight-keyword">class</span> Form1 : Form
    {
        <span class="highlight-keyword">const</span> <span class="highlight-keyword">string</span> StrGuidDefault = <span class="highlight-literal">"5eca211f-8f8f-4848-9c44-ca291c8dbb6a"</span>;

        <span class="highlight-comment">// private instance of our WinUsbManager</span>
        WinUsbManager m_WinUsb;

        <span class="highlight-comment">// Form constructor</span>
        <span class="highlight-keyword">public</span> Form1()
        {
            InitializeComponent();
        }

        <span class="highlight-comment">// Create a new WinUsbManager, disposing of any previous instance.</span>
        <span class="highlight-comment">// Called whenever the GUID changes.</span>
        <span class="highlight-keyword">void</span> CreateWinUsbManager(Guid guid)
        {
            <span class="highlight-keyword">if</span> (m_WinUsb != <span class="highlight-keyword">null</span>)
                m_WinUsb.Dispose();
            m_WinUsb = <span class="highlight-keyword">new</span> WinUsbManager(guid);

            <span class="highlight-comment">// Subscribe to the DeviceChange event</span>
            m_WinUsb.DeviceChange += <span class="highlight-keyword">new</span> EventHandler&lt;DeviceChangeEventArgs&gt;(DeviceChange);

            <span class="highlight-comment">// If any devices are already attached, put them in the list</span>
            <span class="highlight-keyword">foreach</span> (UsbDevice dev <span class="highlight-keyword">in</span> m_WinUsb.UsbDevices)
                GetDeviceName(dev);
        }

        <span class="highlight-comment">// Helper function to get a string descriptor from the USB device.</span>
        <span class="highlight-keyword">string</span> GetStringDescriptor(UsbDevice dev, <span class="highlight-keyword">int</span> iString)
        {
            <span class="highlight-keyword">byte</span>[] arbBuf;

            <span class="highlight-keyword">if</span> (iString != <span class="highlight-number">0</span>)
            {
                <span class="highlight-comment">// Get the string descriptor:</span>
                <span class="highlight-comment">// bmRequestType = 0 - standard device request</span>
                <span class="highlight-comment">// bRequest = 6 - Get_Descriptor</span>
                <span class="highlight-comment">// wValue: high byte = 3 - string; low byte = descriptor index</span>
                <span class="highlight-comment">// wIndex = 0x409 - language ID, US English</span>
                <span class="highlight-comment">// wLength = 255 - max length</span>
                arbBuf = dev.ControlRead(<span class="highlight-number">0</span>, <span class="highlight-number">6</span>, (<span class="highlight-keyword">ushort</span>)(iString | <span class="highlight-number">0x300</span>), <span class="highlight-number">0x409</span>, <span class="highlight-number">255</span>);

                <span class="highlight-comment">// arbBuf[0] = total length</span>
                <span class="highlight-comment">// arbBuf[1] = 3 (string)</span>
                <span class="highlight-comment">// arbBuf[2] = start of string (Unicode)</span>
                <span class="highlight-keyword">if</span> (arbBuf.Length &gt;= <span class="highlight-number">4</span>)
                    <span class="highlight-keyword">return</span> Encoding.Unicode.GetString(arbBuf, <span class="highlight-number">2</span>, arbBuf[<span class="highlight-number">0</span>] - <span class="highlight-number">2</span>);
            }
            <span class="highlight-keyword">return</span> <span class="highlight-keyword">string</span>.Empty;
        }

        <span class="highlight-comment">// Build up device name from manufacturer, product name, and</span>
        <span class="highlight-comment">// serial number strings. The index of each of these strings</span>
        <span class="highlight-comment">// is in a fixed location in the device descriptor. Then add</span>
        <span class="highlight-comment">// the device to the list box.</span>
        <span class="highlight-keyword">void</span> GetDeviceName(UsbDevice dev)
        {
            <span class="highlight-keyword">byte</span>[] arbBuf;
            <span class="highlight-keyword">string</span> strTag;

            <span class="highlight-keyword">try</span>
            {
                dev.Open();

                <span class="highlight-comment">// Get device descriptor</span>
                <span class="highlight-comment">// bmRequestType = 0 - standard device request</span>
                <span class="highlight-comment">// bRequest = 6 - Get_Descriptor</span>
                <span class="highlight-comment">// wValue: high byte = 1 - device; low byte = 0 - descriptor index</span>
                <span class="highlight-comment">// wIndex = 0 - not used</span>
                <span class="highlight-comment">// wLength = 18 - length of descriptor</span>
                arbBuf = dev.ControlRead(<span class="highlight-number">0</span>, <span class="highlight-number">6</span>, <span class="highlight-number">0x100</span>, <span class="highlight-number">0</span>, <span class="highlight-number">18</span>);

                <span class="highlight-comment">// Entries 14, 15, and 16 have the index of the manufacturer,</span>
                <span class="highlight-comment">// product name, and serial number string descriptors, respectively.</span>
                strTag = GetStringDescriptor(dev, arbBuf[<span class="highlight-number">14</span>]);
                strTag += <span class="highlight-literal">'/'</span>;
                strTag += GetStringDescriptor(dev, arbBuf[<span class="highlight-number">15</span>]);
                strTag += <span class="highlight-literal">'/'</span>;
                strTag += GetStringDescriptor(dev, arbBuf[<span class="highlight-number">16</span>]);

                <span class="highlight-comment">// Assign the combined ID string to the Tag.</span>
                dev.Tag = strTag;
            }
            <span class="highlight-keyword">catch</span> (Exception exc)
            {
                dev.Tag = <span class="highlight-literal">"Can't open: "</span> + exc.Message;
            }

            dev.Close();    <span class="highlight-comment">// done for now</span>

            <span class="highlight-comment">// Use the Tag as the value to be returned by ToString().</span>
            <span class="highlight-comment">// This makes it easy to add the UsbDevice to a list box.</span>
            dev.GetMyString = <span class="highlight-keyword">delegate</span>(UsbDevice device) { <span class="highlight-keyword">return</span> (<span class="highlight-keyword">string</span>)device.Tag; };

            <span class="highlight-comment">// The list box will display ToString(), which is now the Tag.</span>
            lstDevices.Items.Add(dev);
        }

        <span class="highlight-comment">//*****************************************************************</span>
        <span class="highlight-comment">// Events</span>

        <span class="highlight-comment">// Matching USB device has been attached or detached.</span>
        <span class="highlight-keyword">void</span> DeviceChange(<span class="highlight-keyword">object</span> sender, DeviceChangeEventArgs e)
        {
            <span class="highlight-keyword">if</span> (e.IsAttach)
                GetDeviceName(e.UsbDevice);    <span class="highlight-comment">// Add name to list box</span>
            <span class="highlight-keyword">else</span>
                lstDevices.Items.Remove(e.UsbDevice); <span class="highlight-comment">// Remove name from list box</span>
        }

        <span class="highlight-comment">// Form is displayed, set the GUID text box to the default value.</span>
        <span class="highlight-comment">// This will cause the TextChanged event to fire.</span>
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> Form1_Shown(<span class="highlight-keyword">object</span> sender, EventArgs e)
        {
            txtGuid.Text = StrGuidDefault;
        }

        <span class="highlight-comment">// GUID has changed. If valid, use it to create a new</span>
        <span class="highlight-comment">// WinUsbManager.</span>
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> txtGuid_TextChanged(<span class="highlight-keyword">object</span> sender, EventArgs e)
        {
            Guid guid;

            lstDevices.Items.Clear();    <span class="highlight-comment">// Empty the list box</span>

            <span class="highlight-keyword">try</span>
            {
                guid = <span class="highlight-keyword">new</span> Guid(txtGuid.Text);
                CreateWinUsbManager(guid);
            }
            <span class="highlight-keyword">catch</span> (Exception exc)
            {
                lstDevices.Items.Add(<span class="highlight-literal">"Invalid GUID: "</span> + exc.Message);
            }
        }

        <span class="highlight-comment">//*****************************************************************</span>
        <span class="highlight-comment">// I/O</span>

        <span class="highlight-comment">// Just for demo purposes, use the DoubleClick event on the list box</span>
        <span class="highlight-comment">// to trigger some I/O on the selected device.</span>
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> lstDevices_DoubleClick(<span class="highlight-keyword">object</span> sender, EventArgs e)
        {
            UsbDevice dev = <span class="highlight-keyword">null</span>;
            BinaryReader reader;
            BinaryWriter writer;

            <span class="highlight-keyword">try</span>
            {
                <span class="highlight-comment">// Open the USB device selected in the list box</span>
                dev = (UsbDevice)lstDevices.SelectedItem;
                dev.Open();

                <span class="highlight-comment">// Search for IN and OUT endpoints. Typically this is not </span>
                <span class="highlight-comment">// necessary because you would know the characteristics of</span>
                <span class="highlight-comment">// your USB device (i.e., what endpoint to use).</span>
                reader = <span class="highlight-keyword">null</span>;
                writer = <span class="highlight-keyword">null</span>;
                <span class="highlight-keyword">foreach</span> (PipeStream pipe <span class="highlight-keyword">in</span> dev.PipeStreams)
                {
                    <span class="highlight-keyword">if</span> (pipe == <span class="highlight-keyword">null</span>)
                        <span class="highlight-keyword">continue</span>;

                    <span class="highlight-comment">// When we find a PipeStream that can read, wrap it in a</span>
                    <span class="highlight-comment">// BinaryReader. Note that it is still OK to bypass it</span>
                    <span class="highlight-comment">// and perform reads directly with the PipeStream.</span>
                    <span class="highlight-keyword">if</span> (pipe.CanRead &amp;&amp; reader == <span class="highlight-keyword">null</span>)
                        reader = <span class="highlight-keyword">new</span> BinaryReader(pipe);

                    <span class="highlight-comment">// To use BinaryWriter, we need to wrap the PipeStream</span>
                    <span class="highlight-comment">// in a BufferedStream. Otherwise each Write() call would</span>
                    <span class="highlight-comment">// send its own little USB packet. If WriteUseShortPacket</span>
                    <span class="highlight-comment">// is false, then the buffer size should just equal the</span>
                    <span class="highlight-comment">// packet size. Otherwise, the buffer must be big enough</span>
                    <span class="highlight-comment">// for the largest block we'll send through the </span>
                    <span class="highlight-comment">// BinaryWriter. Note that you can still bypass the </span>
                    <span class="highlight-comment">// BinaryWriter and go directly to the PipeStream; this</span>
                    <span class="highlight-comment">// would be useful for large blocks.</span>
                    <span class="highlight-keyword">if</span> (pipe.CanWrite &amp;&amp; writer == <span class="highlight-keyword">null</span>)
                        writer = <span class="highlight-keyword">new</span> BinaryWriter(
                            <span class="highlight-keyword">new</span> BufferedStream(pipe, pipe.WriteMaxPacketSize));
                }

                <span class="highlight-comment">// Create some data</span>
                <span class="highlight-keyword">byte</span> b = <span class="highlight-number">0</span>;
                <span class="highlight-keyword">ushort</span> us = <span class="highlight-number">0</span>;
                <span class="highlight-keyword">byte</span> bCnt = <span class="highlight-number">7</span>;
                <span class="highlight-keyword">int</span> i;

                <span class="highlight-comment">// Write command data. By using BufferedStream, nothing is</span>
                <span class="highlight-comment">// sent until the Flush() call.</span>
                writer.Write(b);
                writer.Write(us);
                writer.Write(bCnt);
                writer.Flush();

                <span class="highlight-comment">// Read some data back</span>
                us = reader.ReadUInt16();
                i = reader.ReadInt32();

                <span class="highlight-comment">// Demonstrate bypassing the BinaryReader. Most likely you</span>
                <span class="highlight-comment">// would do this for larger blocks that you want as an</span>
                <span class="highlight-comment">// array of bytes.</span>
                <span class="highlight-comment">//b = reader.ReadByte();</span>
                b = (<span class="highlight-keyword">byte</span>)reader.BaseStream.ReadByte();

                <span class="highlight-comment">// Just show data in debugger output window.</span>
                Debug.WriteLine(<span class="highlight-literal">"Data: "</span> + us + <span class="highlight-literal">", "</span> + i + <span class="highlight-literal">", "</span> + b);
            }
            <span class="highlight-keyword">catch</span> (Exception exc)
            {
                MessageBox.Show(<span class="highlight-literal">"Transfer error: "</span> + exc.Message, 
                    <span class="highlight-literal">"WinUSB Example"</span>, 
                    MessageBoxButtons.OK, 
                    MessageBoxIcon.Error);
            }
            <span class="highlight-keyword">finally</span>
            {
                <span class="highlight-keyword">if</span> (dev != <span class="highlight-keyword">null</span>)
                    dev.Close();
            }
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAABA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID9RB')" onkeypress="SectionExpandCollapse_CheckKey('ID9RB', event)" tabindex="0"><img id="ID9RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID9RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="015f32d9-061b-6669-eca8-b8abe1d244d9.htm">WinUsbNet Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter"> </div></body></html>